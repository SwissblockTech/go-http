apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
spec:
  serviceName: postgresql-headless
  replicas: 1
  # revisionHistoryLimit: 5   # WARN immutable field
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      name: postgresql
      labels:
        app: postgresql
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001

      # INFO: not required for now
      # initContainers:
      #   - name: init-postgresql-env
      #     image: debian:10.6-slim
      #     imagePullPolicy: IfNotPresent
      #     command:
      #       - sh
      #       - -c
      #       - |
      #         echo "Setup PostgreSQL environment"

      #         echo "Prepare DATA folder"
      #         echo "Create"
      #         mkdir -p /var/lib/postgresql/data
      #         echo "Set ownership"
      #         chmod 700 /var/lib/postgresql/data
      #         find /var/lib/postgresql -mindepth 1 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | \
      #           xargs chown -R 1001:1001

      #         echo "Prepare RUN folder"
      #         echo "Create"
      #         mkdir -p /var/run/postgresql
      #     resources:
      #       requests:
      #         cpu: 100m
      #         memory: 64Mi
      #       limits:
      #         cpu: 100m
      #         memory: 128Mi
      #     # WARN: probably won't work as non-root user
      #     securityContext:
      #       # privileged: true
      #       # runAsRoot: true
      #       # readOnlyRootFilesystem: false
      #       runAsNonRoot: true
      #       runAsUser: 1001
      #       runAsGroup: 1001
      #       # readOnlyRootFilesystem: true
      #     volumeMounts:
      #       - name: data
      #         mountPath: /var/lib/postgresql
      #       # Trick part 1 - This trick is to avoid to give containers write access to root filesystem
      #       - name: run
      #         mountPath: /var/run/postgresql

      containers:
      
        - name: postgresql
          image: postgres
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: postgresql
            - secretRef:
                name: postgresql
          ports:
            - name: postgresql
              containerPort: 5432
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            # Trick part 1 - This trick is to avoid to give containers write access to root filesystem
            - name: run
              mountPath: /var/run/postgresql
            # Trick part 1 - This trick is to avoid to give containers write access to root filesystem
            - name: tmp
              mountPath: /tmp

        - name: metrics
          image: wrouesnel/postgres_exporter
          imagePullPolicy: IfNotPresent
          env:
            - name: DATA_SOURCE_URI
              value: 127.0.0.1:5432/postgres?sslmode=disable
            - name: DATA_SOURCE_USER
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: POSTGRES_USER
            - name: DATA_SOURCE_PASS
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: POSTGRES_PASSWORD
          ports:
            - name: metrics
              containerPort: 9187
          resources:
            requests:
              cpu: 25m
              memory: 32Mi
            limits:
              cpu: 25m
              memory: 32Mi
          livenessProbe:
            httpGet:
              path: /
              port: metrics
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              port: metrics
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6

  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
        labels:
          type: ssd
          expandable: "true"
      spec:
        storageClassName: ssd-csi-expandable
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10G
            # storage: 10Gi
    # Trick part 2 - This trick is to avoid to give containers write access to root filesystem
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: run
        labels:
          type: ssd
          expandable: "true"
      spec:
        storageClassName: ssd-csi-expandable
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1G
            # storage: 1Gi
    # Trick part 2 - This trick is to avoid to give containers write access to root filesystem
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: tmp
        labels:
          type: ssd
          expandable: "true"
      spec:
        storageClassName: ssd-csi-expandable
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1G
            # storage: 1Gi
